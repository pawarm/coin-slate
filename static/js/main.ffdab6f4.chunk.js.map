{"version":3,"sources":["reportWebVitals.js","utils/helper-functions.ts","endpoints/coin-market-cap/cryptocurrency-map.ts","endpoints/coin-market-cap/index.ts","utils/constants.ts","endpoints/addresses/ADA.ts","endpoints/addresses/BTCLike.ts","utils/SupportedCurrencyAddresses.ts","contexts/app-context.tsx","components/navbar.tsx","screens/addresses-selection.tsx","screens/main.tsx","router/router.tsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getBalanceByDecimals","balance","decimals","numBalance","parseFloat","i","getAddressesFromLS","currency","JSON","parse","localStorage","getItem","setAddressesInLS","addresses","setItem","stringify","getCMCCurrenciesMapDataFromAPI","a","axios","get","getCMCCurrenciesMap","result","data","status","error_code","useCMCMap","useState","map","setMap","update","setUpdate","triggerUpdate","setTimeout","useEffect","getADADataFromAPI","address","getADABalanceFromAPI","balances","Promise","all","forEach","response","responseData","Object","keys","symbol","caBalance","getCoin","balance_state","BTCLikeCurrencyMap","getBTCLikeDataFromAPI","name","getBTCLikeBalancesFromAPI","quote","toString","supportedCurrencyAddresses","label","value","balanceFunction","initialState","CMCMap","exchanges","manual","appStateContext","createContext","Provider","AppStateProvider","Consumer","children","setBalances","currencyAddresses","useMemo","addressesBalances","prev","MyNavbar","isOpen","setIsOpen","Navbar","color","expand","to","Brand","Toggle","onClick","Collapse","Nav","className","Link","AddressesSelection","chosenCurrency","setChosenCurrency","getAllAddresses","filter","currenciesAddresses","setCurrenciesAddresses","removeAddress","currencyToRemove","addressToRemove","removeAddressFromLS","Container","Form","onSubmit","e","preventDefault","newAddress","target","currencyAddress","includes","push","addAddressToLS","Group","Label","sm","Col","id","options","onChange","newValue","Control","type","placeholder","Button","renderAddressFields","Table","striped","responsive","scope","memo","Main","useContext","length","Router","path","from","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffdab6f4.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getBalanceByDecimals = (balance: string, decimals: number) => {\n  var numBalance = parseFloat(balance);\n  for (let i = decimals; i > 0; i--) numBalance /= 10;\n  return numBalance;\n};\n\nexport const getAddressesFromLS = (currency: string) =>\n  JSON.parse(localStorage.getItem(currency + 'Addresses') || '[]') as string[];\n\nexport const setAddressesInLS = (currency: string, addresses: string[]) =>\n  localStorage.setItem(currency + 'Addresses', JSON.stringify(addresses));\n\nexport const addAddressToLS = (currency: string, address: string) => {\n  const addresses = getAddressesFromLS(currency);\n  if (!addresses.includes(address)) {\n    addresses.push(address);\n    setAddressesInLS(currency, addresses);\n  }\n};\n\nexport const removeAddressFromLS = (currency: string, address: string) => {\n  const addresses = getAddressesFromLS(currency);\n  setAddressesInLS(\n    currency,\n    addresses.filter((a) => a !== address)\n  );\n};\n","import axios from 'axios';\nimport { CoinMarketCapResponse } from 'types/coin-market-cap';\n\nexport const getCMCCurrenciesMapDataFromAPI = async () => {\n  return await axios.get<CoinMarketCapResponse>(\n    'https://coin-slate.herokuapp.com/cmc/cryptocurrency/map'\n  );\n};\n\nexport const getCMCCurrenciesMap = async () => {\n  const result = await getCMCCurrenciesMapDataFromAPI();\n  if (result.data.status.error_code === 0) {\n    return result.data.data;\n  }\n};\n","import { useEffect, useState } from 'react';\nimport { CMCMapRefreshRate, refreshRate } from 'utils/constants';\nimport { getCMCCurrenciesMap } from './cryptocurrency-map';\nimport { CoinMarketCapMapItem } from 'types/coin-market-cap';\n\nexport const useCMCMap = () => {\n  const [map, setMap] = useState<CoinMarketCapMapItem[]>([]);\n  const [update, setUpdate] = useState<boolean>(true);\n\n  const triggerUpdate = () => {\n    setUpdate(!update);\n    setTimeout(() => triggerUpdate(), refreshRate);\n  };\n  useEffect(() => triggerUpdate(), []);\n\n  useEffect(() => {\n    getCMCCurrenciesMap().then((map) => {\n      if (map) {\n        setMap(map);\n      }\n    });\n  }, [update]);\n\n  return map;\n};\n\n// export const getCMCCurrenciesInfoDataFromAPI = async (coins) => {\n//   try {\n//     const url =\n//       'https://pro-api.coinmarketcap.com/v1/cryptocurrency/info?CMC_PRO_API_KEY=' +\n//       '&id=' +\n//       coins;\n//     const res = await axios.get(url);\n//     return res;\n//   } catch (error) {\n//     console.error(error);\n//   }\n// };\n\n// export const getCMCCurrenciesInfo = async (coins) => {\n//   const res = {};\n//   coins.forEach((id) => {\n//     res[id] = {};\n//   });\n//   return getCMCCurrenciesInfoDataFromAPI(coins).then((result) => {\n//     const coinsData = result.data.data;\n//     Object.keys(coinsData).forEach((coin) => {\n//       res[coin].logo = coinsData[coin].logo;\n//     });\n//     return res;\n//   });\n// };\n\n// export const getCMCCurrenciesPricesDataFromAPI = async (coins, convert) => {\n//   try {\n//     const url =\n//       'https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?CMC_PRO_API_KEY=' +\n//       '&id=' +\n//       coins +\n//       '&convert=' +\n//       convert;\n//     const res = await axios.get(url);\n//     return res;\n//   } catch (error) {\n//     console.error(error);\n//   }\n// };\n\n// export const getCMCCurrenciesPrices = async (coins, convert) => {\n//   const res = {};\n//   coins.forEach((id) => {\n//     res[id] = {};\n//   });\n//   return getCMCCurrenciesPricesDataFromAPI(coins, convert).then((result) => {\n//     const coinsData = result.data.data;\n//     Object.keys(coinsData).forEach((coin) => {\n//       res[coin].symbol = coinsData[coin].symbol;\n//       res[coin].name = coinsData[coin].name;\n//       res[coin].rank = coinsData[coin].cmc_rank;\n//       res[coin].price = coinsData[coin].quote[convert].price;\n//       res[coin].percentChange =\n//         coinsData[coin].quote[convert].percent_change_24h;\n//     });\n//     return res;\n//   });\n// };\n","const minute = 60;\nconst hour = minute * 60;\nconst day = hour * 24;\nconst week = day * 7;\nconst month = day * 31;\nconst year = day * 365;\n\nexport const refreshRate = 10000;\nexport const CMCMapRefreshRate = 10000;\nexport const AddressesExpireTime = {\n  ADA: 15 * minute,\n  BTC: 15 * minute\n};\n","import axios from 'axios';\nimport { AddresesBalances, Balance } from 'types/balance';\nimport { getBalanceByDecimals } from 'utils/helper-functions';\nimport { BlockchairADAData } from 'types/blockchair/ADA';\nimport { BlockchairResponse } from 'types/blockchair';\n\nexport const getADADataFromAPI = async (address: string) => {\n  return await axios.get<BlockchairResponse>(\n    'https://api.blockchair.com/cardano/raw/address/' + address\n  );\n};\n\nexport const getADABalanceFromAPI = async (addresses: string[]) => {\n  var balances: AddresesBalances = {};\n  const resolvedData = await Promise.all(\n    addresses.map((address) => getADADataFromAPI(address))\n  );\n  resolvedData.forEach((response) => {\n    if (response.data) {\n      const responseData = response.data.data as BlockchairADAData;\n      const addresses = Object.keys(responseData);\n      addresses.forEach((address) => {\n        const quote = getBalanceByDecimals(\n          responseData[address].address.caBalance.getCoin,\n          8\n        );\n        const balance: Balance = {\n          symbol: 'ADA',\n          balance: quote,\n          balance_state: 'available'\n        };\n        balances[address] = [balance];\n      });\n    }\n  });\n  return balances;\n};\n","import axios from 'axios';\nimport { AddresesBalances, Balance } from 'types/balance';\nimport { BlockchairResponse } from 'types/blockchair';\nimport { BlockchairBTCLikeData } from 'types/blockchair/BTCLike';\nimport { getBalanceByDecimals } from 'utils/helper-functions';\nimport { supportedCurrencyAddressesSymbols } from 'utils/SupportedCurrencyAddresses';\n\nconst BTCLikeCurrencyMap = (symbol: string) => {\n  switch (symbol) {\n    case 'BTC':\n      return 'bitcoin';\n    case 'BCH':\n      return 'bitcoin-cash';\n    case 'LTC':\n      return 'litecoin';\n    case 'BSV':\n      return 'bitcoin-sv';\n    case 'DOGE':\n      return 'dogecoin';\n    case 'DASH':\n      return 'dash';\n    case 'GRS':\n      return 'groestlcoin';\n    case 'ZEC':\n      return 'zcash';\n    case 'XEC':\n      return 'ecash';\n    default:\n      return undefined;\n  }\n};\n\nexport async function getBTCLikeDataFromAPI(address: string, name: string) {\n  return await axios.get<BlockchairResponse>(\n    'https://api.blockchair.com/' + name + '/dashboards/address/' + address\n  );\n}\nexport const getBTCLikeBalancesFromAPI = async (\n  addresses: string[],\n  symbol: supportedCurrencyAddressesSymbols\n) => {\n  const name = BTCLikeCurrencyMap(symbol);\n  if (!name) return;\n  var balances: AddresesBalances = {};\n  const resolvedData = await Promise.all(\n    addresses.map((address) => getBTCLikeDataFromAPI(address, name))\n  );\n  resolvedData.forEach((response) => {\n    if (response.data) {\n      const responseData = response.data.data as BlockchairBTCLikeData;\n      const addresses = Object.keys(responseData);\n      addresses.forEach((address) => {\n        const quote = getBalanceByDecimals(\n          responseData[address].address.balance.toString(),\n          8\n        );\n        const balance: Balance = {\n          symbol: symbol,\n          balance: quote,\n          balance_state: 'available'\n        };\n        balances[address] = [balance];\n      });\n    }\n  });\n  return balances;\n};\n","import { getADABalanceFromAPI } from 'endpoints/addresses/ADA';\nimport { getBTCLikeBalancesFromAPI } from 'endpoints/addresses/BTCLike';\nimport { AddresesBalances } from 'types/balance';\n\nexport type supportedCurrencyAddressesSymbols =\n  | 'BTC'\n  | 'BCH'\n  | 'LTC'\n  | 'BSV'\n  | 'DOGE'\n  | 'DASH'\n  | 'GRS'\n  | 'ZEC'\n  | 'XEC'\n  | 'ADA';\n\nconst supportedCurrencyAddresses: {\n  label: string;\n  value: supportedCurrencyAddressesSymbols;\n  balanceFunction: (\n    addresses: string[],\n    symbol: supportedCurrencyAddressesSymbols\n  ) => Promise<AddresesBalances | undefined>;\n}[] = [\n  {\n    label: 'Bitcoin',\n    value: 'BTC',\n    balanceFunction: getBTCLikeBalancesFromAPI\n  },\n  {\n    label: 'Bitcoin Cash',\n    value: 'BCH',\n    balanceFunction: getBTCLikeBalancesFromAPI\n  },\n  {\n    label: 'Litecoin',\n    value: 'LTC',\n    balanceFunction: getBTCLikeBalancesFromAPI\n  },\n  {\n    label: 'Bitcoin SV',\n    value: 'BSV',\n    balanceFunction: getBTCLikeBalancesFromAPI\n  },\n  {\n    label: 'Dogecoin',\n    value: 'DOGE',\n    balanceFunction: getBTCLikeBalancesFromAPI\n  },\n  // { label: \"Polkadot\", value: \"DOT\" },\n  // { label: \"Ripple\", value: \"XRP\" },\n  // { label: \"Ethereum\", value: \"ETH\" },\n  {\n    label: 'Groestlcoin',\n    value: 'GRS',\n    balanceFunction: getBTCLikeBalancesFromAPI\n  },\n  { label: 'Zcash', value: 'ZEC', balanceFunction: getBTCLikeBalancesFromAPI },\n  { label: 'Dash', value: 'DASH', balanceFunction: getBTCLikeBalancesFromAPI },\n  // { label: \"Stellar\", value: \"XLM\" },\n  { label: 'Cardano', value: 'ADA', balanceFunction: getADABalanceFromAPI },\n  // { label: \"Tezos\", value: \"XTZ\" },\n  { label: 'eCash', value: 'XEC', balanceFunction: getBTCLikeBalancesFromAPI }\n  // { label: \"Algorand\", value: \"ALGO\" },\n  // { label: \"Tron\", value: \"TRX\" },\n  // { label: \"Cosmos\", value: \"ATOM\" },\n  // { label: \"Binance Coin\", value: \"BNB\" },\n];\n\nexport default supportedCurrencyAddresses;\n","import {\n  FC,\n  useContext,\n  createContext,\n  useEffect,\n  useState,\n  useMemo\n} from 'react';\nimport { AllBalances } from '../types/balance';\nimport { getAddressesFromLS } from 'utils/helper-functions';\nimport { useCMCMap } from 'endpoints/coin-market-cap';\nimport { CoinMarketCapMapItem } from 'types/coin-market-cap';\nimport supportedCurrencyAddresses from 'utils/SupportedCurrencyAddresses';\n\ninterface AppStateContext {\n  CMCMap: CoinMarketCapMapItem[];\n  balances: AllBalances;\n}\n\nconst initialState: AppStateContext = {\n  CMCMap: [],\n  balances: {\n    addresses: {},\n    exchanges: {},\n    manual: {}\n  }\n};\n\nconst appStateContext = createContext<AppStateContext>(initialState);\nconst useAppStateContext = (): AppStateContext => useContext(appStateContext);\nconst { Provider, Consumer: AppStateConsumer } = appStateContext;\n\nconst AppStateProvider: FC = ({ children }) => {\n  const [balances, setBalances] = useState<AllBalances>({\n    addresses: {},\n    exchanges: {},\n    manual: {}\n  });\n  const CMCMap = useCMCMap();\n  const currencyAddresses = useMemo(\n    () =>\n      supportedCurrencyAddresses.map((currency) => ({\n        ...currency,\n        addresses: getAddressesFromLS(currency.value)\n      })),\n    []\n  );\n\n  useEffect(() => {\n    currencyAddresses.forEach((currency) => {\n      currency\n        .balanceFunction(currency.addresses, currency.value)\n        .then((addressesBalances) => {\n          setBalances((prev) => ({\n            ...prev,\n            addresses: { ...prev.addresses, ...addressesBalances }\n          }));\n        });\n    });\n  }, [currencyAddresses]);\n\n  const value = {\n    CMCMap,\n    balances\n  };\n\n  return <Provider value={value}>{children}</Provider>;\n};\n\nexport { AppStateProvider, useAppStateContext, AppStateConsumer };\n","import React, { useState } from 'react';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nconst MyNavbar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <div>\n      <Navbar color=\"inverse\" expand=\"md\">\n        <LinkContainer to=\"/main\">\n          <Navbar.Brand>Coin Slate</Navbar.Brand>\n        </LinkContainer>\n        <Navbar.Toggle onClick={() => setIsOpen(!isOpen)} />\n        <Navbar.Collapse>\n          <Nav className=\"ml-auto\">\n            <LinkContainer to=\"/addresses\">\n              <Nav.Link>Addresses</Nav.Link>\n            </LinkContainer>\n            <LinkContainer to=\"/exchanges\">\n              <Nav.Link>Exchanges</Nav.Link>\n            </LinkContainer>\n            <LinkContainer to=\"/yield\">\n              <Nav.Link>Yield</Nav.Link>\n            </LinkContainer>\n            <LinkContainer to=\"/manual\">\n              <Nav.Link>Manual</Nav.Link>\n            </LinkContainer>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default MyNavbar;\n","import { FormEvent, memo, useState } from 'react';\nimport Select from 'react-select';\nimport { Container, Form, Button, Col, Table } from 'react-bootstrap';\nimport supportedCurrencyAddresses from 'utils/SupportedCurrencyAddresses';\nimport {\n  addAddressToLS,\n  getAddressesFromLS,\n  removeAddressFromLS\n} from 'utils/helper-functions';\n\nconst AddressesSelection = () => {\n  const [chosenCurrency, setChosenCurrency] = useState('');\n\n  const getAllAddresses = () =>\n    supportedCurrencyAddresses\n      .filter((currency) => getAddressesFromLS(currency.value))\n      .map((currency) => ({\n        value: currency.value,\n        addresses: getAddressesFromLS(currency.value)\n      }));\n\n  const [currenciesAddresses, setCurrenciesAddresses] = useState(\n    getAllAddresses() || []\n  );\n\n  const onSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const newAddress: string = (e.target as any).currencyAddress.value;\n    addAddressToLS(chosenCurrency, newAddress);\n    setCurrenciesAddresses(getAllAddresses());\n  };\n\n  const removeAddress = (currencyToRemove: string, addressToRemove: string) => {\n    removeAddressFromLS(currencyToRemove, addressToRemove);\n    setCurrenciesAddresses(getAllAddresses());\n  };\n\n  const renderAddressFields = () => {\n    if (chosenCurrency) {\n      return (\n        <div>\n          <Form.Group className=\"mt-4\">\n            <Form.Label sm={3}>Put your {chosenCurrency} address</Form.Label>\n            <Col sm={9}>\n              <Form.Control\n                type=\"text\"\n                name=\"currencyAddress\"\n                id=\"currencyAddress\"\n                placeholder={'Paste your ' + chosenCurrency + ' address here'}\n              />\n            </Col>\n          </Form.Group>\n          <Button type=\"submit\" className=\"mt-4\" color=\"info\">\n            Add address\n          </Button>\n        </div>\n      );\n    }\n  };\n\n  const renderAddressesList = () =>\n    currenciesAddresses\n      .filter(\n        (currency) => currency.value === chosenCurrency || !chosenCurrency\n      )\n      .map((currency) =>\n        currency.addresses.map((address) => (\n          <tr key={address}>\n            <th scope=\"row\">{currency.value}</th>\n            <td>{address}</td>\n            <td>\n              <Button\n                className=\"float-right\"\n                onClick={() => removeAddress(currency.value, address)}\n              >\n                Delete\n              </Button>\n            </td>\n          </tr>\n        ))\n      );\n\n  return (\n    <div>\n      <Container>\n        <Form onSubmit={onSubmit}>\n          <Form.Group className=\"mt-4\">\n            <Form.Label sm={3}>Choose a cryptocurrency</Form.Label>\n            <Col sm={9}>\n              <Select\n                name=\"chosenCurrency\"\n                id=\"chosenCurrency\"\n                options={supportedCurrencyAddresses}\n                onChange={(newValue) =>\n                  newValue && setChosenCurrency(newValue.value)\n                }\n              />\n            </Col>\n          </Form.Group>\n          {renderAddressFields()}\n        </Form>\n        <Table striped responsive>\n          <thead>\n            <tr>\n              <th>Symbol</th>\n              <th>Address</th>\n              <th>Delete</th>\n            </tr>\n          </thead>\n          <tbody>{renderAddressesList()}</tbody>\n        </Table>\n      </Container>\n    </div>\n  );\n};\n\nexport default memo(AddressesSelection);\n","import { memo, useState } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useAppStateContext } from 'contexts/app-context';\n\nconst Main = () => {\n  const { CMCMap, balances } = useAppStateContext();\n\n  return (\n    <>\n      <Container>\n        {Object.keys(balances.addresses).map((address) =>\n          balances.addresses[address].map(\n            (balance) => `${balance.symbol}: ${balance.balance}`\n          )\n        )}\n      </Container>\n      <Container> {CMCMap.length} </Container>\n    </>\n  );\n};\n\nexport default memo(Main);\n","import { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport MyNavbar from 'components/navbar';\nimport AddressesSelection from 'screens/addresses-selection';\n// import ExchangeSelection from \"../screens/ExchangeSelection\";\n// import ManualSelection from \"../screens/ManualSelection\";\nimport Main from 'screens/main';\n\nconst Router = () => (\n  <HashRouter>\n    <MyNavbar />\n    <Switch>\n      <Route path=\"/main\">\n        <Main />\n      </Route>\n      <Route path=\"/addresses\">\n        <AddressesSelection />\n      </Route>\n      <Route path=\"/exchanges\" />\n      <Route path=\"/yield\" />\n      <Route path=\"/manual\" />\n      <Redirect from=\"/\" to=\"/main\" />\n    </Switch>\n  </HashRouter>\n);\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n// import CurrenciesContext from \"Contexts/CurrenciesContext\";\n// import CMCCurrencyMapContext from \"Contexts/CMCCurrencyMapContext\";\n// import BalancesContext from \"Contexts/BalancesContext\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { AppStateProvider } from 'contexts/app-context';\nimport Router from 'router/router';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppStateProvider>\n      <Router />\n    </AppStateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}