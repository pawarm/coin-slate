{"version":3,"sources":["reportWebVitals.js","endpoints/coin-market-cap/cryptocurrency-map.ts","endpoints/coin-market-cap/index.ts","utils/constants.ts","contexts/app-context.tsx","components/navbar.tsx","screens/main.tsx","router/router.tsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getCMCCurrenciesMapDataFromAPI","a","axios","get","getCMCCurrenciesMap","result","data","status","error_code","useCMCMap","useState","map","setMap","update","setUpdate","triggerUpdate","setTimeout","useEffect","initialState","CMCMap","balances","appStateContext","createContext","Provider","AppStateProvider","Consumer","children","useReducer","prevBalances","newCurrencies","concat","value","MyNavbar","isOpen","setIsOpen","Navbar","color","expand","to","Brand","Toggle","onClick","Collapse","Nav","className","Link","Main","useContext","Container","balance","symbol","length","memo","Router","basename","path","from","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14cc06f4.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\nimport { CoinMarketCapResponse } from 'types/coin-market-cap';\n\nexport const getCMCCurrenciesMapDataFromAPI = async () => {\n  return await axios.get<CoinMarketCapResponse>(\n    'https://coin-slate.herokuapp.com/cmc/cryptocurrency/map'\n  );\n};\n\nexport const getCMCCurrenciesMap = async () => {\n  const result = await getCMCCurrenciesMapDataFromAPI();\n  if (result.data.status.error_code === 0) {\n    return result.data.data;\n  }\n};\n","import { useEffect, useState } from 'react';\nimport { CMCMapRefreshRate, refreshRate } from 'utils/constants';\nimport { getCMCCurrenciesMap } from './cryptocurrency-map';\nimport { CoinMarketCapMapItem } from 'types/coin-market-cap';\n\nexport const useCMCMap = () => {\n  const [map, setMap] = useState<CoinMarketCapMapItem[]>([]);\n  const [update, setUpdate] = useState<boolean>(true);\n\n  const triggerUpdate = () => {\n    setUpdate(!update);\n    setTimeout(() => triggerUpdate(), refreshRate);\n  };\n  useEffect(() => triggerUpdate(), []);\n\n  useEffect(() => {\n    getCMCCurrenciesMap().then((map) => {\n      if (map) {\n        setMap(map);\n      }\n    });\n  }, [update]);\n\n  return map;\n};\n\n// export const getCMCCurrenciesInfoDataFromAPI = async (coins) => {\n//   try {\n//     const url =\n//       'https://pro-api.coinmarketcap.com/v1/cryptocurrency/info?CMC_PRO_API_KEY=' +\n//       '&id=' +\n//       coins;\n//     const res = await axios.get(url);\n//     return res;\n//   } catch (error) {\n//     console.error(error);\n//   }\n// };\n\n// export const getCMCCurrenciesInfo = async (coins) => {\n//   const res = {};\n//   coins.forEach((id) => {\n//     res[id] = {};\n//   });\n//   return getCMCCurrenciesInfoDataFromAPI(coins).then((result) => {\n//     const coinsData = result.data.data;\n//     Object.keys(coinsData).forEach((coin) => {\n//       res[coin].logo = coinsData[coin].logo;\n//     });\n//     return res;\n//   });\n// };\n\n// export const getCMCCurrenciesPricesDataFromAPI = async (coins, convert) => {\n//   try {\n//     const url =\n//       'https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?CMC_PRO_API_KEY=' +\n//       '&id=' +\n//       coins +\n//       '&convert=' +\n//       convert;\n//     const res = await axios.get(url);\n//     return res;\n//   } catch (error) {\n//     console.error(error);\n//   }\n// };\n\n// export const getCMCCurrenciesPrices = async (coins, convert) => {\n//   const res = {};\n//   coins.forEach((id) => {\n//     res[id] = {};\n//   });\n//   return getCMCCurrenciesPricesDataFromAPI(coins, convert).then((result) => {\n//     const coinsData = result.data.data;\n//     Object.keys(coinsData).forEach((coin) => {\n//       res[coin].symbol = coinsData[coin].symbol;\n//       res[coin].name = coinsData[coin].name;\n//       res[coin].rank = coinsData[coin].cmc_rank;\n//       res[coin].price = coinsData[coin].quote[convert].price;\n//       res[coin].percentChange =\n//         coinsData[coin].quote[convert].percent_change_24h;\n//     });\n//     return res;\n//   });\n// };\n","const minute = 60;\nconst hour = minute * 60;\nconst day = hour * 24;\nconst week = day * 7;\nconst month = day * 31;\nconst year = day * 365;\n\nexport const refreshRate = 10000;\nexport const CMCMapRefreshRate = 10000;\nexport const AddressesExpireTime = {\n  ADA: 15 * minute,\n  BTC: 15 * minute\n};\n","import { getADABalanceFromAPI } from 'endpoints/addresses/ADA';\nimport { useAddressesBalance } from 'endpoints/addresses';\nimport { FC, useContext, createContext, useReducer, useEffect } from 'react';\nimport { Balance } from '../types/balance';\nimport { getAddressesFromLS } from 'utils/helper-functions';\nimport { useCMCMap } from 'endpoints/coin-market-cap';\nimport { CoinMarketCapMapItem } from 'types/coin-market-cap';\n\ninterface AppStateContext {\n  CMCMap: CoinMarketCapMapItem[];\n  balances: Balance[];\n}\n\nconst initialState: AppStateContext = {\n  CMCMap: [],\n  balances: []\n};\n\nconst appStateContext = createContext<AppStateContext>(initialState);\nconst useAppStateContext = (): AppStateContext => useContext(appStateContext);\nconst { Provider, Consumer: AppStateConsumer } = appStateContext;\n\nconst AppStateProvider: FC = ({ children }) => {\n  const CMCMap = useCMCMap();\n  // const ADAAddresses = getAddressesFromLS('ADA');\n\n  const [balances, addToBalances] = useReducer(\n    (prevBalances: Balance[], newCurrencies: Balance[]) =>\n      prevBalances.concat(newCurrencies),\n    []\n  );\n  // const ADAAddressesBalances = useAddressesBalance(\n  //   getADABalanceFromAPI,\n  //   'ADA',\n  //   ADAAddresses\n  // );\n  // useEffect(() => {\n  //   // if (ADAAddressesBalances.length) addToBalances(ADAAddressesBalances);\n  // }, [ADAAddressesBalances]);\n\n  const value = {\n    CMCMap,\n    balances\n  };\n\n  return <Provider value={value}>{children}</Provider>;\n};\n\nexport { AppStateProvider, useAppStateContext, AppStateConsumer };\n","import React, { useState } from 'react';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nconst MyNavbar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <div>\n      <Navbar color=\"inverse\" expand=\"md\">\n        <LinkContainer to=\"/\">\n          <Navbar.Brand>Coin Slate</Navbar.Brand>\n        </LinkContainer>\n        <Navbar.Toggle onClick={() => setIsOpen(!isOpen)} />\n        <Navbar.Collapse>\n          <Nav className=\"ml-auto\">\n            <LinkContainer to=\"/addresses\">\n              <Nav.Link>Addresses</Nav.Link>\n            </LinkContainer>\n            <LinkContainer to=\"/exchanges\">\n              <Nav.Link>Exchanges</Nav.Link>\n            </LinkContainer>\n            <LinkContainer to=\"/yield\">\n              <Nav.Link>Yield</Nav.Link>\n            </LinkContainer>\n            <LinkContainer to=\"/manual\">\n              <Nav.Link>Manual</Nav.Link>\n            </LinkContainer>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default MyNavbar;\n","import { memo, useState } from 'react';\nimport { Container } from 'react-bootstrap';\nimport { useAppStateContext } from 'contexts/app-context';\n\nconst Main = () => {\n  const [cumulatedBalances, setCumulatedBalances] = useState({});\n\n  const { CMCMap, balances } = useAppStateContext();\n\n  return (\n    <>\n      <Container>\n        {balances.map((balance) => balance.symbol + ': ' + balance.balance)}\n      </Container>\n      <Container> {CMCMap.length} </Container>\n    </>\n  );\n};\n\nexport default memo(Main);\n","import { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport MyNavbar from 'components/navbar';\n// import AddressesSelection from \"../screens/AddressesSelection\";\n// import ExchangeSelection from \"../screens/ExchangeSelection\";\n// import ManualSelection from \"../screens/ManualSelection\";\nimport Main from '../screens/main';\n\nconst Router = () => {\n  return (\n    <BrowserRouter basename=\"/coin-slate\">\n      <MyNavbar />\n\n      <Switch>\n        <Route path=\"/main\">\n          <Main />\n        </Route>\n        <Route path=\"/addresses\"> {/* <AddressesSelection /> */} </Route>\n        <Route path=\"/exchanges\"> {/* <ExchangeSelection /> */} </Route>\n        <Route path=\"/yield\"></Route>\n        <Route path=\"/manual\">{/* <ManualSelection /> */}</Route>\n        <Redirect from=\"/\" to=\"/main\" />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n// import CurrenciesContext from \"Contexts/CurrenciesContext\";\n// import CMCCurrencyMapContext from \"Contexts/CMCCurrencyMapContext\";\n// import BalancesContext from \"Contexts/BalancesContext\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { AppStateProvider } from 'contexts/app-context';\nimport Router from 'router/router';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppStateProvider>\n      <Router />\n    </AppStateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}